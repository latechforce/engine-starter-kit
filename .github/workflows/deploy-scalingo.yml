name: Deploy to Scalingo

on:
  workflow_run:
    workflows: ['Release']
    types:
      - completed
    branches:
      - main

env:
  SCALINGO_API_URL: https://api.osc-fr1.scalingo.com/v1
  SCALINGO_AUTH_URL: https://auth.scalingo.com/v1

jobs:
  deploy:
    name: Deploy to Scalingo
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get app name from package.json
        id: get-app-name
        run: |
          APP_NAME=$(bun -e "console.log(require('./package.json').name)")
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Get Bearer Token
        id: get-bearer-token
        run: |
          # Get the Bearer token
          BEARER_TOKEN_RESPONSE=$(curl -s \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -u ":${{ secrets.SCALINGO_API_TOKEN }}" \
            -X POST "${{ env.SCALINGO_AUTH_URL }}/tokens/exchange")

          echo "Bearer token response: $BEARER_TOKEN_RESPONSE"

          # Extract the token
          BEARER_TOKEN=$(echo "$BEARER_TOKEN_RESPONSE" | jq -r '.token')

          if [ -z "$BEARER_TOKEN" ] || [ "$BEARER_TOKEN" = "null" ]; then
            echo "Failed to get Bearer token"
            exit 1
          fi

          echo "BEARER_TOKEN=$BEARER_TOKEN" >> $GITHUB_OUTPUT

      - name: Check if app exists on Scalingo
        id: check-app
        run: |
          # Debug: Print the Bearer token (first few characters)
          echo "Using Bearer token: ${BEARER_TOKEN:0:10}..."

          # Get the full response for debugging
          response=$(curl -s \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}")

          # Get the status code
          status_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}")

          echo "Status code: $status_code"
          echo "Response: $response"

          if [ "$status_code" = "404" ]; then
            echo "App does not exist (404)"
            echo "APP_EXISTS=false" >> $GITHUB_OUTPUT
          elif [ "$status_code" = "200" ]; then
            echo "App exists (200)"
            echo "APP_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Unexpected status code: $status_code"
            echo "APP_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create app if it doesn't exist
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps" \
            -d "{\"name\": \"${{ steps.get-app-name.outputs.APP_NAME }}\"}"

      - name: Add PostgreSQL addon if app was created
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/addons" \
            -d '{
              "addon": {
                "addon_provider_id": "postgresql",
                "plan_id": "5cc45d3e3e6b3b001249e5a5"
              }
            }'

      - name: Get current package version
        id: get-version
        run: |
          CURRENT_VERSION=$(bun -e "console.log(require('./package.json').dependencies['@latechforce/engine'].replace('^', ''))")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Set environment variables
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/variables" \
            -d "{
              \"variables\": [
                {
                  \"name\": \"GH_TOKEN\",
                  \"value\": \"${{ secrets.GH_TOKEN }}\"
                },
                {
                  \"name\": \"GH_ENGINE_CONFIG_URL\",
                  \"value\": \"https://api.github.com/repos/${{ github.repository }}/contents/engine.config.json\"
                },
                {
                  \"name\": \"LTF_ENGINE_VERSION\",
                  \"value\": \"${{ steps.get-version.outputs.CURRENT_VERSION }}\"
                }
              ]
            }"

      - name: Get deployed version
        id: get-deployed-version
        run: |
          # Get environment variables
          ENV_VARS_RESPONSE=$(curl -s \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/variables")

          # Extract the engine version from environment variables
          DEPLOYED_VERSION=$(echo "$ENV_VARS_RESPONSE" | jq -r '.variables[] | select(.name == "LTF_ENGINE_VERSION") | .value')

          if [ -z "$DEPLOYED_VERSION" ] || [ "$DEPLOYED_VERSION" = "null" ]; then
            echo "No engine version found in environment variables"
            echo "DEPLOYED_VERSION=null" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "DEPLOYED_VERSION=$DEPLOYED_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check-version
        run: |
          if [ "${{ steps.get-version.outputs.CURRENT_VERSION }}" != "${{ steps.get-deployed-version.outputs.DEPLOYED_VERSION }}" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi

      - name: Update engine version if changed
        if: steps.check-version.outputs.VERSION_CHANGED == 'true'
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/variables" \
            -d "{
              \"variables\": [
                {
                  \"name\": \"LTF_ENGINE_VERSION\",
                  \"value\": \"${{ steps.get-version.outputs.CURRENT_VERSION }}\"
                }
              ]
            }"

      - name: Deploy if app doesn't exist or version changed
        if: steps.check-app.outputs.APP_EXISTS == 'false' || steps.check-version.outputs.VERSION_CHANGED == 'true'
        run: |
          echo "Starting deployment process..."
          echo "App name: ${{ steps.get-app-name.outputs.APP_NAME }}"
          echo "GitHub SHA: ${{ github.sha }}"

          echo "Creating source and getting upload/download URLs..."
          # Create a source and get upload/download URLs
          SOURCE_RESPONSE=$(curl -s \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -X POST "${{ env.SCALINGO_API_URL }}/sources")

          # Extract upload and download URLs
          UPLOAD_URL=$(echo "$SOURCE_RESPONSE" | jq -r '.source.upload_url')
          DOWNLOAD_URL=$(echo "$SOURCE_RESPONSE" | jq -r '.source.download_url')

          if [ -z "$UPLOAD_URL" ] || [ -z "$DOWNLOAD_URL" ]; then
            echo "❌ Failed to get source URLs"
            echo "Source response: $SOURCE_RESPONSE"
            exit 1
          fi
          echo "✅ Successfully got source URLs"

          echo "Downloading archive from GitHub..."
          # Download the archive from GitHub with progress indicator and proper headers
          curl -L --progress-bar \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o archive.tar.gz \
            "https://api.github.com/repos/${{ github.repository }}/tarball/${{ github.sha }}"

          # Debug the downloaded file
          echo "Checking downloaded file..."
          file archive.tar.gz
          echo "File size: $(ls -lh archive.tar.gz | awk '{print $5}')"
          echo "First few bytes:"
          hexdump -C -n 100 archive.tar.gz

          # Verify the archive integrity
          if ! gzip -t archive.tar.gz; then
            echo "❌ Archive integrity check failed"
            echo "Archive size: $(ls -lh archive.tar.gz | awk '{print $5}')"
            echo "Archive content:"
            tar -tvf archive.tar.gz || true
            exit 1
          fi

          echo "✅ Archive integrity verified"
          echo "Archive size: $(ls -lh archive.tar.gz | awk '{print $5}')"
          echo "Archive content:"
          tar -tvf archive.tar.gz

          echo "Uploading archive to Scalingo..."
          # Upload the archive to Scalingo with progress indicator
          UPLOAD_RESPONSE=$(curl -L --progress-bar \
            -H "Content-Type: application/x-gzip" \
            -X PUT \
            --upload-file ./archive.tar.gz \
            "$UPLOAD_URL")

          if [ $? -eq 0 ]; then
            echo "✅ Successfully uploaded archive"
          else
            echo "❌ Failed to upload archive"
            echo "Upload response: $UPLOAD_RESPONSE"
            exit 1
          fi

          echo "Initiating deployment on Scalingo..."
          # Deploy using the download URL
          DEPLOY_RESPONSE=$(curl -X POST \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/deployments" \
            -d "{
              \"deployment\": {
                \"git_ref\": \"${{ github.sha }}\",
                \"source_url\": \"$DOWNLOAD_URL\"
              }
            }")

          if [ $? -eq 0 ]; then
            echo "✅ Successfully initiated deployment"
            echo "Deployment response: $DEPLOY_RESPONSE"
          else
            echo "❌ Failed to initiate deployment"
            echo "Deployment response: $DEPLOY_RESPONSE"
            exit 1
          fi

          echo "Cleaning up temporary files..."
          # Clean up
          rm archive.tar.gz
          echo "✅ Deployment process completed successfully"

      - name: Restart app if app exists and version didn't change
        if: steps.check-app.outputs.APP_EXISTS == 'true' && steps.check-version.outputs.VERSION_CHANGED == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/restart"
