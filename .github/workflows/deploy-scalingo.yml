name: Deploy to Scalingo

#on:
#  workflow_run:
#    workflows: ['Release']
#    types:
#      - completed

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  SCALINGO_API_URL: https://api.osc-fr1.scalingo.com/v1
  SCALINGO_AUTH_URL: https://auth.scalingo.com/v1

jobs:
  deploy:
    name: Deploy to Scalingo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get app name from package.json
        id: get-app-name
        run: |
          APP_NAME=$(bun -e "console.log(require('./package.json').name)")
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Get Bearer Token
        id: get-bearer-token
        run: |
          # Get the Bearer token
          BEARER_TOKEN_RESPONSE=$(curl -s \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -u ":${{ secrets.SCALINGO_API_TOKEN }}" \
            -X POST "${{ env.SCALINGO_AUTH_URL }}/tokens/exchange")

          echo "Bearer token response: $BEARER_TOKEN_RESPONSE"

          # Extract the token
          BEARER_TOKEN=$(echo "$BEARER_TOKEN_RESPONSE" | jq -r '.token')

          if [ -z "$BEARER_TOKEN" ] || [ "$BEARER_TOKEN" = "null" ]; then
            echo "Failed to get Bearer token"
            exit 1
          fi

          echo "BEARER_TOKEN=$BEARER_TOKEN" >> $GITHUB_OUTPUT

      - name: Check if app exists on Scalingo
        id: check-app
        run: |
          # Debug: Print the Bearer token (first few characters)
          echo "Using Bearer token: ${BEARER_TOKEN:0:10}..."

          # Get the full response for debugging
          response=$(curl -s \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}")

          # Get the status code
          status_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}")

          echo "Status code: $status_code"
          echo "Response: $response"

          if [ "$status_code" = "404" ]; then
            echo "App does not exist (404)"
            echo "APP_EXISTS=false" >> $GITHUB_OUTPUT
          elif [ "$status_code" = "200" ]; then
            echo "App exists (200)"
            echo "APP_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Unexpected status code: $status_code"
            echo "APP_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create app if it doesn't exist
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps" \
            -d "{\"name\": \"${{ steps.get-app-name.outputs.APP_NAME }}\"}"

      - name: Add PostgreSQL addon if app was created
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/addons" \
            -d '{
              "addon_provider": {
                "provider_id": "postgresql",
                "plan": "postgresql-sandbox"
              }
            }'

      - name: Set environment variables
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/variables" \
            -d "{
              \"variables\": [
                {
                  \"name\": \"GH_TOKEN\",
                  \"value\": \"${{ secrets.GH_TOKEN }}\"
                },
                {
                  \"name\": \"GH_ENGINE_CONFIG_URL\",
                  \"value\": \"${{ github.server_url }}/${{ github.repository }}/raw/main/engine.config.json\"
                }
              ]
            }"

      - name: Deploy if app doesn't exist
        if: steps.check-app.outputs.APP_EXISTS == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/deployments" \
            -d "{\"git_ref\": \"${{ github.sha }}\"}"

      - name: Run build:config if app exists
        if: steps.check-app.outputs.APP_EXISTS == 'true'
        run: bun run build:config

      - name: Commit config changes
        if: steps.check-app.outputs.APP_EXISTS == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./engine.config.json
          git commit -m "chore: update engine config" || exit 0
          git push

      - name: Restart app if app exists
        if: steps.check-app.outputs.APP_EXISTS == 'true'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.get-bearer-token.outputs.BEARER_TOKEN }}" \
            "${{ env.SCALINGO_API_URL }}/apps/${{ steps.get-app-name.outputs.APP_NAME }}/restart"
